// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MsCatalog.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MsCatalog.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MsCatalog.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MsCatalog.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("MsCatalog.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SpecialPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("TaxPercent")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MsCatalog.Models.ProductsIngredients", b =>
                {
                    b.Property<string>("IngredientId")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<string>("ProductId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<Guid>("IngredientId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId1")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId", "ProductId");

                    b.HasIndex("IngredientId1");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductsIngredients");
                });

            modelBuilder.Entity("MsCatalog.Models.Product", b =>
                {
                    b.HasOne("MsCatalog.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MsCatalog.Models.ProductsIngredients", b =>
                {
                    b.HasOne("MsCatalog.Models.Ingredient", "Ingredient")
                        .WithMany("ProductsIngredients")
                        .HasForeignKey("IngredientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsCatalog.Models.Product", "Product")
                        .WithMany("ProductsIngredients")
                        .HasForeignKey("ProductId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MsCatalog.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MsCatalog.Models.Ingredient", b =>
                {
                    b.Navigation("ProductsIngredients");
                });

            modelBuilder.Entity("MsCatalog.Models.Product", b =>
                {
                    b.Navigation("ProductsIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
